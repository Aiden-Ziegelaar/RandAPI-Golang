// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcService

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RandAPIClient is the client API for RandAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandAPIClient interface {
	WeightedBoolean(ctx context.Context, in *WeightedBooleanRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	Boolean(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BooleanResponse, error)
	IntegerN(ctx context.Context, in *IntegerRequest, opts ...grpc.CallOption) (*IntegerResponse, error)
	Integer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IntegerResponse, error)
}

type randAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewRandAPIClient(cc grpc.ClientConnInterface) RandAPIClient {
	return &randAPIClient{cc}
}

func (c *randAPIClient) WeightedBoolean(ctx context.Context, in *WeightedBooleanRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/RandAPI/WeightedBoolean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randAPIClient) Boolean(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/RandAPI/Boolean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randAPIClient) IntegerN(ctx context.Context, in *IntegerRequest, opts ...grpc.CallOption) (*IntegerResponse, error) {
	out := new(IntegerResponse)
	err := c.cc.Invoke(ctx, "/RandAPI/IntegerN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randAPIClient) Integer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IntegerResponse, error) {
	out := new(IntegerResponse)
	err := c.cc.Invoke(ctx, "/RandAPI/Integer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RandAPIServer is the server API for RandAPI service.
// All implementations must embed UnimplementedRandAPIServer
// for forward compatibility
type RandAPIServer interface {
	WeightedBoolean(context.Context, *WeightedBooleanRequest) (*BooleanResponse, error)
	Boolean(context.Context, *empty.Empty) (*BooleanResponse, error)
	IntegerN(context.Context, *IntegerRequest) (*IntegerResponse, error)
	Integer(context.Context, *empty.Empty) (*IntegerResponse, error)
	mustEmbedUnimplementedRandAPIServer()
}

// UnimplementedRandAPIServer must be embedded to have forward compatible implementations.
type UnimplementedRandAPIServer struct {
}

func (UnimplementedRandAPIServer) WeightedBoolean(context.Context, *WeightedBooleanRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeightedBoolean not implemented")
}
func (UnimplementedRandAPIServer) Boolean(context.Context, *empty.Empty) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Boolean not implemented")
}
func (UnimplementedRandAPIServer) IntegerN(context.Context, *IntegerRequest) (*IntegerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegerN not implemented")
}
func (UnimplementedRandAPIServer) Integer(context.Context, *empty.Empty) (*IntegerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Integer not implemented")
}
func (UnimplementedRandAPIServer) mustEmbedUnimplementedRandAPIServer() {}

// UnsafeRandAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandAPIServer will
// result in compilation errors.
type UnsafeRandAPIServer interface {
	mustEmbedUnimplementedRandAPIServer()
}

func RegisterRandAPIServer(s *grpc.Server, srv RandAPIServer) {
	s.RegisterService(&_RandAPI_serviceDesc, srv)
}

func _RandAPI_WeightedBoolean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeightedBooleanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandAPIServer).WeightedBoolean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RandAPI/WeightedBoolean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandAPIServer).WeightedBoolean(ctx, req.(*WeightedBooleanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RandAPI_Boolean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandAPIServer).Boolean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RandAPI/Boolean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandAPIServer).Boolean(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RandAPI_IntegerN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandAPIServer).IntegerN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RandAPI/IntegerN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandAPIServer).IntegerN(ctx, req.(*IntegerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RandAPI_Integer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandAPIServer).Integer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RandAPI/Integer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandAPIServer).Integer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _RandAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RandAPI",
	HandlerType: (*RandAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WeightedBoolean",
			Handler:    _RandAPI_WeightedBoolean_Handler,
		},
		{
			MethodName: "Boolean",
			Handler:    _RandAPI_Boolean_Handler,
		},
		{
			MethodName: "IntegerN",
			Handler:    _RandAPI_IntegerN_Handler,
		},
		{
			MethodName: "Integer",
			Handler:    _RandAPI_Integer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
